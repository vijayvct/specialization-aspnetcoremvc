Asp.NET Core MVC 
----------------

Asp.NET Core 
------------
Asp.Net core is cross-platform, high-performance,light-weight and open-source framework for building modern, cloud-enabled, Internet connected Apps(IOT).
It also helps to create backend application (RestFul API)
Deploy to cloud or on-permises
Use favorite development tools on Windows, Linux and MAC

Why ?
-----
It is cross-platform in nature
It provides unified templates to create Web UI(MVC and RazorPage) and Web API 

	Empty Project :- You can configure the project as per your requirement 
	MVC - It helps creating applicaiton using popular MVC design pattern 
	Web API - Http based services
	RazorPage - It helps creating application for page-focused scenarios 
	
	Blazor - It allows to create SPA(Single Page Application) and run C# code in browser 
	
It has built-in support for dependency injection
It has built-in support for logging
Asp.NET Core apps can be deployed on the following 

	Kestrel 
	IIS
	HTTP.sys
	Nginx
	Apache
	Docker 
	
Asp.NET Core does not support Asp.NET Web Forms 

What is MVC?
------------
MVC stands for Model-View-Controller
It is popular pattern for developing web application
It helps to achieve separation of concern i.e. It divides the application into following 
	Model - Data 
	View - UI (HTML5)
	Controller - Logic to process request 
	
Eases in unit testing 
Support Routing, Model Binding , Model Validation 
Use Razor View Engine to render UI 

Asp.NET Web Forms 
-----------------
-It was tighly coupled 
-Difficult for unit testing 
-It uses ViewState which makes page heavy 

Project Templates 
-----------------
Asp.NET Core Web Application (MVC)
Asp.NET Core Web Application (Razor Page)
Asp.NET Core Web API 
Asp.NET Core Empty Application

Version History of Asp.NET Core 
-------------------------------
Asp.NET Core 1.0 , 1.1 - VS 2015
Asp.NET Core 2.0,2.1,2.2 - VS 2017 
Asp.NET Core 3.0, 3.1 , 5 - VS 2019 
Asp.NET Core 6.0,7.0, 8.0preview - VS 2022

Practical 
---------
1)Create an Asp.NET Core Empty Project 
2)Understand the Project Structure 
	wwwroot 
	Program.cs
	appsetting.json
	launchSettings.json 
	Model 
	Views 
	Controller
3)Concept of Services and Middleware

wwwroot :- It is a special folder for keeping all the static content (HTML,CSS,JS,Images etc....)

Program.cs :- It is the start point of the application. It contains the code for intialization and bootstrapping your ASP.NET Core Project. It also consist of configuration of Services and Middleware for your application 


Till 5.0 
--------
	Program.cs 
	Startup.cs 
		ConfigureServices() - used to configure the service
		Configure() - used to configure Middleware
		
Middlewares
-----------
Asp.Net Core Middleware are the software components that are assembeled into the application pipeline to handle the HTTP Request and Response
Each Middleware component in Asp.NET Core application performs the following task 

	-Choose whether to execute the HTTP request or pass it to the next middleware component in the pipeline. This is can be achieved by calling the next method in the middleware 
	-Can perform work before and after the next middleware component in the pipeline
	
Terminal Middleware or Short-Circuiting a Middleware

http://localhost:1234 -> Hello world 

http://localhost:1234/showmessage -> Hello User, Welcome to Aso.NET Core 

http://localhost:1234/index.html 

http://localhost:1234/demo/demo.html

appsettings.json 
----------------
This file lets you store setting for the application i.e. ConnectionString,Credentials, User Secrets etc......
There can be multiple version of appsettings.json file in a project 

	appsettings.json (production)
	appsettings.development.json (development)
	appsettings.staging.json
	appsettings.testing.json 
	
	the above version of the files would be selected by the ASP.NET core based on the ASPNETCORE_ENVIORNMENT variable value mentioned in the launch profile of the launchsettings.json 
	
Hosting Model in Asp.NET Core 
-----------------------------

What is Kestrel ?
-----------------
Kestrel is a cross-platform web server for Asp.NET Core. It is the webserver that is included by default in Asp.NET Core project templates

Features of Kestrel
-------------------
It Supports SSL 
Light-weight
Cross-Platform 
It can handle a huge number of requests for the web application 

Out-of Process Hosting Model 
----------------------------
In Out-of Process hosting models, we can either use the Kestrel server directly as user request facing server or we can deplot the app into IIS or any other proxy server and send request to internal Kestrel server

In-Process Hosting Model 
------------------------
In this aproach only one server is used for hosting the application

BookStoreApp - To manage book details 

For MVC Project 
---------------
	Controllers 
		- Consist of all the controller classes 
		
			<<classname>>Controller.cs
			
			eg:- HomeController,EmployeeController,AccountController etc....
	Models 
		- Consist of the Model Class(Entity) and logic to perform CRUD operation
		
		
	Views 
		- Consist of all the views files organized as per the controllername 
		
			Views 
				Home
					Index.cshtml 
					About.cshtml 
				Employee
					Index.cshtml 
					Create.cshtml 
					...
					
		View files are based on the razor syntax and their extension is .cshtml (C#) or .vbhtml (VB.NET)

Razor Syntax
------------
Razor is view engine for ASP.NET Core MVC.
It allows you to write a mix of HTML and server-side code using C# or Visual Basic.
Razor view with VB syntax has .vbhtml file extension and C# syntax will have .cshtml 

Advantages 
----------
Compact :- Razor Syntax is compact, enabling you to minimize the number if characters and keystrokes required to write code 

Easy to Learn :- Razor syntax is easy to learn where you can use your familiar langauge C# or Visual Basic 

Intellisense :- It supports statement completion with Visual Studio 

Inline Expression 
-----------------

<p>@DateTime.Now.ToString()</p>

Multi-Line Code Block 
---------------------
@{
	var date = DateTime.Now.ToString();
	var message = "Hello User";
}

<h2>Date is @date</h2>
<h3>@message</h3>

@* ..... *@ - Comments in Razor Syntax

To enable Asp.Net MVC Functionality in Empty Project 
----------------------------------------------------

Asp.NET 1.0 to 2.2

	AddMVC() // Adds MVC and Web API Support to the project 
	
Asp.NET 3.0 to 7.0

	AddMVC() 
	
	AddControllersWithViews() - MVC
	AddControllers() - WEB API 
	AddRazorPages() - Razore Page Web APP
	

Asp.NET Web Forms 
-----------------
	http://localhost/default.aspx
	http://localhost/AddEmployee.aspx...
	
Asp.NET MVC 
-----------

	http://localhost/controller/action
	
	http://localhost/home/index
	http://localhost/home/about
	
	http://localhost/employee/details?id=1
	

	ViewBag - dynamic data type 
	ViewData - Dictionary
	
	TempData
	
ViewBag - Is used to transfer temporary data from controller to the view. It is based on the dynamic data type so you do not need to perform explicit type casting while access the data from the ViewBag. It allows us to create properties on the go to store the information

ViewData - ViewData is similar to ViewBag, which transfer the data from controller to View. ViewData is based on dictionary, so its store the data in key-value pairs. It box the data as object so which access the data or perform anyother operation data we need to perform explicit type-casting 

TempData - It is used to transfer data from View to Controller , Controller to View or from one action method to another action method of the same of different controller

What is Repository Pattern?
---------------------------

Repository pattern is a design pattern that mediates data from and to the Domain and the Data Access Layer(like EF , EF Core, ADO.NET).
It helps us create an abstraction layer between the data access and the business logic layer.
By using it, we are promoting a more loosely coupled approach to access our data from the database
It also helps us to acces clean code which is easy to maintain and reuse

Data access logic is in a separate class or set of classes called repositry 

Service Lifetime in Dependency Injection 
----------------------------------------

Transient 
---------
The first way we can register a type in dependency injection container is by using Transient lifetime 

In this case, an object is created every time it is requested from the dependency injection container.

AddTransient<interface,implementclass>()

Scoped 
-------
In this case, one object is created per request lifecycle.

AddScoped<interface,implementclass>()

Singleton 
---------
In this case, only one object is create for all the users who are accessing the application 

AddSingleton<interface,implementclass>()

Lib Manager 
-----------
It is tool built into Visual Studio to manager client side libraries 
It helps to pull libraries from multiple provider cdnjs,unpkg etc.
It adds json file to the project using which we can easily work with client side libraries

BookStoreMVC Application 
------------------------
List of Books 
Add New Books 
Search Book based on ID 
Update Book 
Delete Book

Tag Helpers :- Provides a convient way to create HTML Markup with MVC Implementation

@addTagHelper *,Microsoft.AspNetCore.Mvc.TagHelpers
@addTagHelper *,BookStoreMVCAPP 

Creating Centralized Layout Page (Common Look and Feel)
------------------------------------------------------
Asp.NET Core MVC uses the concept of Layout pages to have common look and feel across multiple views
We can have one or more layout added to the project 
The layout should always be placed in the shared folder under views folder 

After creating the layout we refer the in each view by using the Layout property of the view or we refer the Layout globally for tha whole application in the _ViewStart.cshtml

Special Files in Asp.NET Core 
-----------------------------
_ViewStart.cshtml - It is used to specify the start up action for the project 

_ViewImports.cshtml - It is used to include the using statement 

The above 2 files should be placed in the Views Folder

Model Binding 
-------------
Model Binding maps data in a HTTP Request to controller action method parameters
The action parameters may be simple type such as integer, strings etc or complex types like Customer,Employee,Book etc...
Model binding does all the heavy lifting for perform data binding and due we write less code 

Model Validation in Asp.NET Core 
--------------------------------
Model Validation helps us validate the user inputs for a Model before sending it to server for processing 
To implement model validation in Asp.NET Core MVC we use data annotation 

	System.ComponentModel.DataAnnotation;
	
	Require 
	DisplayName 
	DataType....
	
To capture the validation errors on a view we can use the below options 

	1)Validation Summary - Display a summarized description of all the errors on the view 
	
	<div asp-validation-summary="All"> </div>
	
	2)Display invidual validation error message for a control 
	
	<span asp-validation-for="Name"></span>
	
	In controllers we wil use the ModelState.IsValid to check wheather the validation is passed or failed

Understand the service lifetime 
-------------------------------
AddSingleton()
--------------
As the name implies this method create a Singleton Service.
A Singleton service is create when the first request is made and the instance is used by all the subsequent request.

AddScoped()
-----------
This method creates a Scoped service.
A new instance of a Scoped Service is created once per request within the scope

AddTransient()
--------------
This method creates Transient service.
A new instance of a Transient service is created each time it is requested

Implementing EF Core 
--------------------
Libraries Required 
------------------
Microsoft.EntityFrameworkCore 
Microsoft.EntityFrameworkCore.SqlServer
Microsoft.EntityFrameworkCore.Tools 
Microsoft.EntityFrameworkCore.Design

Code First 

Nuget Package Manager Conosle 

Install-Package Microsoft.EntityFrameworkCore -version 6.0.15
Install-Package Microsoft.EntityFrameworkCore.SqlServer -version 6.0.15
Install-Package Microsoft.EntityFrameworkCore.Tools -version 6.0.15
Install-Package Microsoft.EntityFrameworkCore.Design -version 6.0.15

Migration


Error and Exception Handling 
----------------------------

Resource with specified ID does not exits 

The provided url does not match any route in the application 

Centralized 404 Error Handling 

	UseStatusCodePage()
	UseStatusCodePageWithRedirects()
	UseStatusCodePageWithReExecute()
	
Exception Handling 

	UseExceptionHandler()
	
How to create re-usable user interface?
---------------------------------------
Partial View
------------
A partial view is a Razore markup file that renders HTML output within another markup files rendered output 

Why?
----
It breaks up large markup file into smaller components 

Reduce the duplication of common markup content across markup files 

MVC --> Views/Shared

RazorPage --> Pages 

View Components
---------------
View Components are similar to partial view but they are much more powerful
It does not used model binding and only depends on the data provided when calling into it 
It renders a chunck rather than a whole response 
Can have parameters and business logic
It is typically invoked from the layout page 

Where to use?
-------------
Dynamic Navigation Menus 
Login Panel 
Shopping Cart 
Recently Published Arcticles 

A View component should always inherit fro ViewComponent class 

LanguageCount --> LanguageCountViewComponent.cs
ShoppingCart --> ShoppingCartViewComponent.cs

The View for the ViewComponent should be placed as per the following heirarchy 

	Views 
		Shared
			Components
				LanguageCount
					view file
					
To render the view compoenent in the layout file we can use the following ways 

1) @await Component.InvokeAsync("ComponentName")

2) View Component Tag Helper 

	<vc:nameofcompoentview></vc:nameofcompoentview>